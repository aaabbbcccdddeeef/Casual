{"version":3,"sources":["features/root/components/Header/Header.js","features/algorithms/components/Algorithm.js","features/algorithms/solutions/bestTrade.js","features/algorithms/solutions/decks.js","features/algorithms/solutions/flatten.js","features/binaryTree/BinaryTree.js","features/algorithms/Algorithms.js","features/binaryTree/components/Node/Node.js","features/binaryTree/components/Editor/Editor.js","features/colors/components/Color.js","features/colors/Colors.js","features/root/Root.js","App.js","index.js"],"names":["ToolBarFlex","styled","Toolbar","display","justifyContent","Lnk","name","to","toLowerCase","replace","Typography","color","Header","AppBar","position","Algorithm","problem","algorithm","method","testCases","ExpansionPanel","ExpansionPanelSummary","expandIcon","variant","ExpansionPanelDetails","Grid","container","spacing","item","xs","Paper","elevation","rounded","style","padding","whiteSpace","elevantion","toString","map","a","bestTrade","prices","length","maxProfit","buyDay","sellDay","i","j","profit","decks","input","completeDeck","Map","base","forEach","d","set","x","get","values","Array","from","Math","min","_rootNode","flatten","result","isArray","push","Algorithms","Fragment","MainContainer","Container","textAlign","borderRadius","KeyContainer","fontSize","ChildrenContainer","justifyItems","LeftNode","width","backgroundColor","RightNode","Node","node","key","nodeKey","left","right","Editor","addNode","useState","inputValue","setInputValue","className","type","value","onChange","event","target","onClick","BinaryTree","rootNode","setRootNode","useEffect","savedRootNode","localStorage","getItem","JSON","parse","keyValue","nodeValue","setItem","stringify","parseInt","cloneDeep","Color","code","complementaryColor","hex","h","s","rgb","match","RegExp","l","join","r","split","g","b","max","hue2rgb","p","q","t","round","substring","hexComplimentary","toUpperCase","Card","CardHeader","title","substr","subheader","CardContent","Colors","href","Root","exact","path","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0e83513.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { styled } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Toolbar, Typography } from '@material-ui/core';\n\nconst ToolBarFlex = styled(Toolbar)({\n    display: 'flex',\n    justifyContent: 'space-around'\n});\n\nconst Header = () => {\n    return (\n        <AppBar position='static' color=\"transparent\">\n            <ToolBarFlex>\n                <Link to=\"/\"><Typography>\n                    Home\n                </Typography></Link>\n                <Lnk name=\"Binary Tree\"></Lnk>\n                <Lnk name=\"Algorithms\"></Lnk>\n                <Lnk name=\"Taxes\"></Lnk>\n                <Lnk name=\"Birthdays\"></Lnk>\n                <Lnk name=\"Colors\"></Lnk>\n            </ToolBarFlex>\n        </AppBar>\n    )\n}\n\nconst Lnk = ({ name }) => {\n    return <Link to={'/' + name.toLowerCase().replace(/ /g, '')}>\n        <Typography color='primary'>{name}</Typography>\n    </Link>\n}\n\nexport default Header;","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst Algorithm = ({ name, problem, algorithm, method, testCases }) => {\n\n    return (\n\n        <ExpansionPanel>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography color=\"textPrimary\" variant=\"h5\">{name}</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} name=\"Problem\">\n                        <Paper elevation={3} rounded={true} style={{ padding: '15px' }}>\n                            <Typography color=\"primary\" variant=\"h6\">Problem</Typography>\n                            <Typography color=\"textSecondary\" style={{ whiteSpace: 'pre-line' }}>\n                                {problem}\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} name=\"Algorithm\">\n                        <Paper elevantion={3} style={{ padding: '15px' }}>\n                            <Typography variant=\"h6\">Algorithm</Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" style={{ whiteSpace: 'pre-line' }}>\n                                {algorithm}\n                            </Typography>\n                        </Paper>\n                    </Grid>\n\n                    <Grid item xs={12} name=\"Method\">\n                        <Paper elevantion={3} style={{ padding: '15px' }}>\n                            <Typography variant=\"h6\">Method</Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" style={{ whiteSpace: 'pre-line' }}>\n                                {method.toString()}\n\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} name=\"testcases\">\n                        <Paper elevantion={3} style={{ padding: '15px' }}>\n                            <Typography variant=\"h6\">Test Cases</Typography>\n                            {\n                                testCases.map(a => (\n                                    <div>\n                                        {a.toString()}==> { method(a).toString()}\n                                    </div>\n                                ))\n                            }\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    )\n};\n\nexport default Algorithm;","\nconst problem = `Input is an array of Integers which denotes the stock value of company X.\n\nEx : [1,5,6,7,34,10]\n\nIn this case :\n1 is the stock value of company X on Day 0.\n5 is the stock value of company X on Day 1.\n...\n10 is the stock value of a comany X on Day 5.\n\nYou need to find the day where I can buy the stock and day where I can sell the stock to get the max profit :\n\nIn the above case, If I buy the stock at Day 0 (i.e when the value is 1) and sell on Day 4 (when the value is 34). I get the max profit. Profit = 34-1 = 33. So, the output for the above example should be [0,4] (i.e [buy-day, sell-day])\n\nIf there is a test case in which any profit is not possible, Print [0,0] (i.e: you're buying and selling the stock on the same day)\n\nTest Cases :\n[200, 1,5,6,7,34,10]\n[1,5,6,7,34,10,300]\n[10,1,5,6,7,34,10,20]\n[2,200,1,0,10]\n[7,10]\n[1] //Output: [0,0] You buy and sell on the same day because there's only one number.\n\nIf an emty array or null is passed as an input return [-1,-1].`;\n\nconst algorithm = `// loop1 from 0 to end with BuyIndex\n// loop2 from index to end sellIndex\n// declare MaxProfit, BuyDay, SellDay\n// compute profit if greater than MaxProfit, Replace BuyDay,SellDay and overriteMaxProfit`;\n\nfunction method(prices) {\n    if (!prices || prices.length === 0) {\n        return [-1, -1];\n    }\n\n    if (prices.length === 1) {\n        return [0, 0];\n    }\n\n    let maxProfit = 0;\n    let buyDay = 0;\n    let sellDay = 0;\n\n    for (let i = 0; i < prices.length; i++) {\n        for (let j = i + 1; j < prices.length; j++) {\n            const profit = prices[j] - prices[i];\n            if (profit > maxProfit) {\n                maxProfit = profit;\n                buyDay = i;\n                sellDay = j\n            }\n        }\n    }\n\n    return [buyDay, sellDay];\n\n};\n\nconst testCases = [\n    [1, 5, 6, 7, 34, 10],\n    [200, 1, 5, 6, 7, 34, 10],\n    [1, 5, 6, 7, 34, 10, 300],\n    [10, 1, 5, 6, 7, 34, 10, 20],\n    [2, 200, 1, 0, 10],\n    [7, 10],\n    [1]\n\n];\nconst bestTrade = {\n    name: 'Best Trade',\n    problem,\n    algorithm,\n    method,\n    testCases\n};\n\nexport default bestTrade;","\nfunction method(input) {\n    const completeDeck = new Map();\n    const base = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'];\n    base.forEach(d => completeDeck.set(d + 'H', 0));\n    base.forEach(d => completeDeck.set(d + 'S', 0));\n    base.forEach(d => completeDeck.set(d + 'D', 0));\n    base.forEach(d => completeDeck.set(d + 'C', 0));\n\n\n    input.forEach(x => {\n        completeDeck.set(x, completeDeck.get(x) + 1);\n    });\n\n    const values = Array.from(completeDeck.values());\n    return Math.min(...values);\n}\n\n\n\nconst testCases = [\n    [\"9C\", \"KS\", \"AC\", \"AH\", \"8D\", \"4C\", \"KD\", \"JC\", \"7D\", \"9D\", \"2H\", \"7C\", \"3C\", \"7S\", \"5C\", \"6H\", \"TH\"],\n    [\"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\"],\n    [\"TD\", \"TC\", \"6H\", \"5H\", \"KC\", \"JH\", \"QC\", \"4S\", \"2S\", \"8H\", \"JD\", \"2H\", \"AC\", \"7D\", \"6C\", \"5D\", \"AD\", \"TS\", \"4D\", \"KH\", \"3H\", \"9H\", \"3S\", \"2D\", \"5S\", \"6S\", \"AH\", \"JS\", \"6D\", \"9S\", \"4C\", \"7C\", \"8S\", \"AS\", \"KD\", \"7S\", \"4H\", \"KS\", \"7H\", \"9D\", \"8D\", \"3D\", \"5C\", \"9C\", \"QH\", \"JC\", \"8C\", \"TH\", \"QS\", \"3C\", \"QD\", \"2C\"],\n    [\"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"AH\"],\n    [\"QC\", \"6D\", \"KD\", \"QS\", \"7S\", \"5C\", \"QH\", \"3H\", \"AD\", \"9C\", \"7H\", \"QD\", \"QH\", \"2S\", \"AH\", \"KS\", \"5D\", \"QC\", \"AS\", \"2D\", \"6C\", \"8C\", \"7D\", \"8H\", \"9S\", \"4D\", \"6H\", \"JC\", \"3S\", \"4C\", \"3C\", \"7S\", \"KD\", \"4H\", \"5C\", \"7C\", \"AS\", \"3D\", \"7D\", \"2H\", \"8S\", \"2H\", \"8D\", \"9S\", \"3C\", \"5H\", \"KS\", \"8D\", \"9H\", \"TH\", \"2C\", \"JH\", \"6D\", \"KC\", \"TS\", \"6S\", \"TD\", \"4S\", \"8S\", \"5S\", \"8H\", \"TD\", \"9D\", \"4H\", \"6C\", \"7C\", \"AC\", \"JC\", \"JD\", \"TS\", \"KH\", \"2C\", \"QD\", \"JS\", \"QS\", \"KH\", \"8C\", \"3H\", \"2D\", \"2S\", \"3S\", \"5H\", \"4S\", \"9C\", \"4D\", \"6H\", \"JS\", \"TH\", \"9H\", \"TC\", \"7H\", \"JH\", \"TC\", \"6S\", \"AD\", \"AC\", \"JD\", \"4C\", \"5D\", \"9D\", \"KC\", \"3D\"],\n    [\"AC\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"AC\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"AC\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\"]\n];\n\n\nconst problem = `You’re given an X decks of N playing cards with few cards missing. The playing cards can be in the form of an array and is shuffled in any order:\n\nEg: [\"9C\", \"KS\", \"AC\", \"AH\", \"8D\", \"4C\", \"KD\", \"JC\", \"7D\", \"9D\", \"2H\", \"7C\", \"3C\", \"7S\", \"5C\", \"6H\", “TH\"]\n\nwhere: ‘H’,’S’,’D’,’C’ is Hearts, Spades, Diamonds and Clubs\n\nand ‘A’,’2’,’3’,’4’,’5’,’6’,’7’,’8’,’9’,’T’,’J’,’Q’,’K’ is Ace, 2,3…. Ten, Jack, Queen, King respectively.\n\nYou need to find out how many complete decks can be made from the cards you’ve given in the input.\n\nTest Cases:\n\ndecksOfCards([\"9C\", \"KS\", \"AC\", \"AH\", \"8D\", \"4C\", \"KD\", \"JC\", \"7D\", \"9D\", \"2H\", \"7C\", \"3C\", \"7S\", \"5C\", \"6H\", \"TH\"]) // Output: 0 (No complete decks in this array)\n\ndecksOfCards([\"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\"]) // Output: 2 (2 complete decks in this array)\n\ndecksOfCards([\"TD\", \"TC\", \"6H\", \"5H\", \"KC\", \"JH\", \"QC\", \"4S\", \"2S\", \"8H\", \"JD\", \"2H\", \"AC\", \"7D\", \"6C\", \"5D\", \"AD\", \"TS\", \"4D\", \"KH\", \"3H\", \"9H\", \"3S\", \"2D\", \"5S\", \"6S\", \"AH\", \"JS\", \"6D\", \"9S\", \"4C\", \"7C\", \"8S\", \"AS\", \"KD\", \"7S\", \"4H\", \"KS\", \"7H\", \"9D\", \"8D\", \"3D\", \"5C\", \"9C\", \"QH\", \"JC\", \"8C\", \"TH\", \"QS\", \"3C\", \"QD\", \"2C\"]) // Output: 1\n\ndecksOfCards([\"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"2S\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"AH\"]) // Output: 2\n\ndecksOfCards([\"QC\", \"6D\", \"KD\", \"QS\", \"7S\", \"5C\", \"QH\", \"3H\", \"AD\", \"9C\", \"7H\", \"QD\", \"QH\", \"2S\", \"AH\", \"KS\", \"5D\", \"QC\", \"AS\", \"2D\", \"6C\", \"8C\", \"7D\", \"8H\", \"9S\", \"4D\", \"6H\", \"JC\", \"3S\", \"4C\", \"3C\", \"7S\", \"KD\", \"4H\", \"5C\", \"7C\", \"AS\", \"3D\", \"7D\", \"2H\", \"8S\", \"2H\", \"8D\", \"9S\", \"3C\", \"5H\", \"KS\", \"8D\", \"9H\", \"TH\", \"2C\", \"JH\", \"6D\", \"KC\", \"TS\", \"6S\", \"TD\", \"4S\", \"8S\", \"5S\", \"8H\", \"TD\", \"9D\", \"4H\", \"6C\", \"7C\", \"AC\", \"JC\", \"JD\", \"TS\", \"KH\", \"2C\", \"QD\", \"JS\", \"QS\", \"KH\", \"8C\", \"3H\", \"2D\", \"2S\", \"3S\", \"5H\", \"4S\", \"9C\", \"4D\", \"6H\", \"JS\", \"TH\", \"9H\", \"TC\", \"7H\", \"JH\", \"TC\", \"6S\", \"AD\", \"AC\", \"JD\", \"4C\", \"5D\", \"9D\", \"KC\", \"3D\"]) // Output: 1\n\ndecksOfCards([\"AC\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"AC\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\", \"AC\", \"2C\", \"2D\", \"2H\", \"3S\", \"3C\", \"3D\", \"3H\", \"4S\", \"4C\", \"4D\", \"4H\", \"5S\", \"5C\", \"5D\", \"5H\", \"6S\", \"6C\", \"6D\", \"6H\", \"7S\", \"7C\", \"7D\", \"7H\", \"8S\", \"8C\", \"8D\", \"8H\", \"9S\", \"9C\", \"9D\", \"9H\", \"TS\", \"TC\", \"TD\", \"TH\", \"JS\", \"JC\", \"JD\", \"JH\", \"QS\", \"QC\", \"QD\", \"QH\", \"KS\", \"KC\", \"KD\", \"KH\", \"AS\", \"AC\", \"AD\", \"AH\"]) // Output: 0`\n\nconst algorithm = ``;\n\n\nconst decks = {\n    name: 'Decks',\n    problem,\n    algorithm,\n    method,\n    testCases\n};\n\nexport default decks;\n","\nfunction method(input, result) {\n    input.forEach(x => {\n        if (Array.isArray(x)) {\n            method(x, result);\n        } else {\n            if (!result){\n                result = [];\n            }\n            result.push(x);\n        }\n    });\n    return result;\n}\n\nconst problem = `Flatten this array out : [1,2,[3,4,[5,6],7,[8,9]]]\nOutput should be [1,2,3,4,5,6,7,8,9]\n\nYou can ONLY use arr.push(), arr.concat() as library / array functions. Please don't use any other library or array functions.`\n\nconst algorithm = ``;\n\nconst testCases = [[1,2,[3,4,[5,6],7,[8,9]]]];\nconst flatten = {\n    name: 'Flatten Array',\n    problem,\n    algorithm,\n    method,\n    testCases\n};\n\nexport default flatten;","import React, { useState, useEffect } from 'react';\nimport Node from './components/Node/Node';\nimport { cloneDeep } from 'lodash';\nimport Editor from './components/Editor/Editor';\n\nlet _rootNode;\nconst BinaryTree = () => {\n\n    let [rootNode, setRootNode] = useState({ key: null, left: null, right: null });\n    useEffect(() => {\n        const savedRootNode = localStorage.getItem('rootNode');\n        if (savedRootNode) {\n            setRootNode(JSON.parse(savedRootNode));\n        }\n    }, []);\n\n    const addNode = (node, nodeValue) => {\n\n        // duplicate nodevalue not allowd\n        if (node.key === nodeValue) return;\n\n        if (node.key === null) {\n            node.key = nodeValue;\n            node.left = null;\n            node.right = null;\n            localStorage.setItem('rootNode', JSON.stringify(_rootNode));\n            return setRootNode(_rootNode);\n        }\n        // insert to the right\n        if (parseInt(nodeValue) > parseInt(node.key)) {\n            if (node.right) {\n                // continue searching\n                addNode(node.right, nodeValue);\n            } else {\n                // right node is terminus: initialize right node, next iteration is the last one.\n                node.right = { key: null };\n                addNode(node.right, nodeValue);\n            }\n        } else {\n            if (node.left) {\n                addNode(node.left, nodeValue);\n            } else {\n                node.left = { key: null };\n                addNode(node.left, nodeValue);\n            }\n        }\n    }\n\n    const addNodeHandler = (keyValue) => {\n        _rootNode = cloneDeep(rootNode);\n        addNode(_rootNode, keyValue);\n    }\n\n    return (\n        <React.Fragment>\n            <Editor addNode={addNodeHandler} />\n            <Node node={rootNode} />\n        </React.Fragment>\n    )\n}\n\nexport default BinaryTree;","import React from 'react';\nimport Algorithm from './components/Algorithm';\nimport bestTrade from './solutions/bestTrade';\nimport decks from './solutions/decks';\nimport flatten from './solutions/flatten';\n\nconst Algorithms =()=> {\n\n    return (\n        <React.Fragment>\n            <Algorithm  {...bestTrade}/>\n            <Algorithm  {...decks}/>\n            <Algorithm  {...flatten}/>\n        </React.Fragment>\n    )\n\n}\n\nexport default Algorithms;","import React from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\n\nconst MainContainer = styled(Container)({\n    textAlign: 'center',\n    borderRadius: '25%',\n});\n\n\n\nconst KeyContainer = styled(Container)({\n    fontSize: '1em',\n}\n);\n\nconst ChildrenContainer = styled(Container)({\n    display: 'flex',\n    justifyItems: 'center',\n    justifyContent: 'center',\n});\n\nconst LeftNode = styled(Container)({\n    width: '50%',\n    backgroundColor: 'yellow',\n});\n\nconst RightNode = styled(Container)({\n    width: '50%',\n    backgroundColor: 'magenta',\n}\n);\n\n\nconst Node = ({ node }) => {\n    if (!node || !node.key) {\n        return null;\n    }\n\n    const nodeKey = <MainContainer >\n        <KeyContainer>{node.key}</KeyContainer>\n        <ChildrenContainer >\n            <LeftNode >\n                {\n                    node.left && <Node node={node.left} />\n                }\n            </LeftNode>\n            <RightNode >\n                {\n                    node.right && <Node node={node.right} />\n                }\n            </RightNode>\n        </ChildrenContainer>\n    </MainContainer>;\n\n\n    return (\n        <React.Fragment>\n            {nodeKey}\n        </React.Fragment>\n    )\n\n}\n\n\nexport default Node;","import React, { useState } from 'react';\nimport './editor.scss';\n\nconst Editor = ({ addNode }) => {\n\n    const [inputValue, setInputValue] = useState(0);\n\n    const pushNode = () => {\n        // Math.round(Math.random() * 100)\n        addNode(inputValue);\n    }\n\n    const handleInputChange = (event) => {\n        setInputValue(event.target.value);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"editor-container\">\n                <label>\n                    Value:\n                <input type=\"number\" value={inputValue} onChange={handleInputChange}></input>\n                </label>\n                <button type=\"button\" onClick={pushNode}>Add</button>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Editor;","import React from 'react'\nimport { Card, CardHeader, CardContent } from '@material-ui/core'\nimport Grid from '@material-ui/core/Grid';\n\nconst Color = ({ name, code }) => {\n    const complementaryColor = hexComplimentary(code).toUpperCase();\n    return (\n        <Card>\n            <CardHeader title={name + ' ' + code.substr(1)} subheader={'comp = ' + complementaryColor.substr(1)} />\n            <CardContent>\n                <Grid container spacing={3}>\n                    <Grid item xs={10} style={{backgroundColor: code}}></Grid>\n                    <Grid item xs={2} style={{backgroundColor: complementaryColor, color: code}}>{complementaryColor.substr(1)}</Grid>\n                </Grid>\n            </CardContent>\n        </Card>\n\n    )\n}\n\nfunction hexComplimentary(hex) {\n\n    var rgb = 'rgb(' + (hex = hex.replace('#', '')).match(new RegExp('(.{' + hex.length / 3 + '})', 'g')).map(function (l) { return parseInt(hex.length % 2 ? l + l : l, 16); }).join(',') + ')';\n\n    // Get array of RGB values\n    rgb = rgb.replace(/[^\\d,]/g, '').split(',');\n\n    var r = rgb[0] / 255.0, g = rgb[1] / 255.0, b = rgb[2] / 255.0;\n\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2.0;\n\n    if (max === min) {\n        h = s = 0;  //achromatic\n    } else {\n        var d = max - min;\n        s = (l > 0.5 ? d / (2.0 - max - min) : d / (max + min));\n\n        if (max === r && g >= b) {\n            h = 1.0472 * (g - b) / d;\n        } else if (max === r && g < b) {\n            h = 1.0472 * (g - b) / d + 6.2832;\n        } else if (max === g) {\n            h = 1.0472 * (b - r) / d + 2.0944;\n        } else if (max === b) {\n            h = 1.0472 * (r - g) / d + 4.1888;\n        }\n    }\n\n    h = h / 6.2832 * 360.0 + 0;\n\n    // Shift hue to opposite side of wheel and convert to [0-1] value\n    h += 180;\n    if (h > 360) { h -= 360; }\n    h /= 360;\n\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        var hue2rgb = function hue2rgb(p, q, t) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    r = Math.round(r * 255);\n    g = Math.round(g * 255);\n    b = Math.round(b * 255);\n\n    // Convert r b and g values to hex\n    rgb = b | (g << 8) | (r << 16);\n    return \"#\" + (0x1000000 | rgb).toString(16).substring(1);\n}\n\n\nexport default Color;","import React from 'react'\nimport Color from './components/Color'\n\nconst Colors = () => {\n    return (\n        <React.Fragment>\n            <Color name='Lime' code='#05FF01'></Color>\n            <Color name='Olive' code='#818000'></Color>\n            <Color name='Skyblue' code='#86CEEB'></Color>\n            <Color name='Navy' code='#000080'></Color>\n            <Color name='Snow' code='#FFFAFA'></Color>\n            <Color name='Chocolate' code='#D2691F'></Color>\n            <Color name='Firebrick' code='#B22122'></Color>\n            <Color name='Tan' code='#D2B48C'></Color>\n            <Color name='Silver' code='#C0C0C0'></Color>\n            <Color name='Teal' code='#028080'></Color>\n            <div style={{ textAlign: 'center' }}>\n                <a href=\"https://visme.co/blog/color-combinations\" target=\"_blank\">https://visme.co/blog/color-combinations</a>\n            </div>\n\n        </React.Fragment>\n    )\n}\n\nexport default Colors;","import React from 'react';\nimport Header from './components/Header/Header';\nimport  {Route} from 'react-router-dom';\nimport Algorithms from '../algorithms/Algorithms'\nimport BinaryTree from '../binaryTree/BinaryTree'\nimport Colors from '../colors/Colors';\n\nconst Root = ()=> {\n    return (\n        <React.Fragment>\n            <Header />\n            <Route exact path=\"/\" component={null}></Route>\n            <Route exact path=\"/binarytree\" component={BinaryTree}></Route>\n            <Route exact path=\"/algorithms\" component={Algorithms}></Route>\n            <Route exact path=\"/colors\" component={Colors}></Route>\n        </React.Fragment>\n    )\n}\n\nexport default Root;","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Root from './features/root/Root';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Root></Root>\n    </Router>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}